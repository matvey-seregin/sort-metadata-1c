
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда		
		Оповещение = Новый ОписаниеОповещения("ПриОткрытииВебКлиентЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, НСтр("ru = 'Обработка не предназначена для работы в веб-клиенте.'"));
		Возврат;		
	#КонецЕсли
	
	Если ПустаяСтрока(ИБ_Логин) Тогда
		ИБ_Логин = ИмяПользователя();
		ИБ_Пароль = "";
	КонецЕсли;
	
	СтрокаПодключенияИБ = СтрокаСоединенияИнформационнойБазы();
	
	ЗагрузитьТаблицуПрефиксовИзJSON();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПрефиксыПриИзменении(Элемент)
	СохранитьТаблицуПрефиксовВJSON();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодготовитьКонфигурацию(Команда)
	
	ПослеЧтенияОбъектовМетаданных = Новый ОписаниеОповещения("ПоказатьСтраницуПрефиксов", ЭтотОбъект);
	
	ПрочитатьОбъектыМетаданных(ПослеЧтенияОбъектовМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКонфигурацию(Команда)
	
	СохранитьНовыйПорядок();

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонфигуратор(Команда)
	
	СтрокаПодключенияИБАдаптированная = СтрЗаменить(СтрокаПодключенияИБ, """", """""");
	
	Команда = ПостроитьКоманднуюСтрокуЗапускаКонфигуратора(СтрокаПодключенияИБАдаптированная);
	
	ВыполнитьКоманднуюСтроку(Команда, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСТекущимиНастройками(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СортироватьСТекущимиНастройкамиПроверкаПрефиксов", ЭтотОбъект);
	
	Если Объект.Префиксы.Количество() = 0 Тогда
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Не заполнены настройки префиксов, объекты медатанных будут отсортированы по алфавиту без учета префиксов.
			|Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоИспользуемые(Команда)
		
	Элементы.ПрефиксыТолькоИспользуемые.Пометка = Не Элементы.ПрефиксыТолькоИспользуемые.Пометка;
	
	УстановитьОтборПрефиксов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ПриОткрытииВебКлиентЗавершение(ДополнительныеПараметры) Экспорт	
	Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСТекущимиНастройкамиПроверкаПрефиксов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЧтенияОбъектовМетаданных = Новый ОписаниеОповещения("СохранитьНовыйПорядок", ЭтотОбъект);
	
	ПрочитатьОбъектыМетаданных(ПослеЧтенияОбъектовМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуПрефиксов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПрефиксы;
	
КонецПроцедуры
		
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ВыполнитьКоманднуюСтроку(КоманднаяСтрока, ОжидатьЗавершения = Истина)
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(КоманднаяСтрока,, ОжидатьЗавершения, КодВозврата);
	Возврат КодВозврата <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЗаписьВЛог(Запись)
	
	Лог = Лог + ТекущаяДата() + Символы.Таб + Запись + Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПрефиксВИмениОбъекта(ИмяОбъекта)
	
	ПозицияПодчеркивания = СтрНайти(ИмяОбъекта, "_", НаправлениеПоиска.СНачала);
	
	Если ПозицияПодчеркивания = 1 Тогда
		ПозицияПодчеркивания = СтрНайти(ИмяОбъекта, "_", НаправлениеПоиска.СНачала,, 2);
	КонецЕсли;	
	
	Если ПозицияПодчеркивания = 0 Тогда
		
		Если СтрНачинаетсяС(ИмяОбъекта, "Удалить") Тогда
			Возврат "Удалить";
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;
	
	Префикс = Лев(ИмяОбъекта, ПозицияПодчеркивания - 1);
	
	ПрефиксДобавленВТаблицу = Ложь;
	
	Для Каждого Строка Из Объект.Префиксы Цикл
		Если Строка.Префикс = Префикс Тогда
			ПрефиксДобавленВТаблицу = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПрефиксДобавленВТаблицу Тогда
		Строка = Объект.Префиксы.Добавить();
		Строка.Префикс = Префикс;
		Строка.ПорядокПрефикса = 1;
	КонецЕсли;
			
	Возврат Префикс;	
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьОбъектыМетаданных(ПослеЧтенияОбъектовМетаданных = Неопределено)
	
	#Если Не ВебКлиент Тогда
	
	Объект.ОбъектыМетаданных.Очистить();
	
	РазделительПути = ПолучитьРазделительПути();

	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	
	КаталогТекущейКонфигурации = ВременныйКаталог + РазделительПути + "Config" + РазделительПути;	
	
	ДополнительныеПараметры = Новый Структура;
	
	ПослеВыгрузкиКонфигурацииВXML = Новый ОписаниеОповещения("ПрочитатьОбъектыМетаданныхИзВыгрузки", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("КаталогТекущейКонфигурации", КаталогТекущейКонфигурации);
	ДополнительныеПараметры.Вставить("ПослеВыгрузкиКонфигурацииВXML", ПослеВыгрузкиКонфигурацииВXML);
	
	Если ПослеЧтенияОбъектовМетаданных <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ПослеЧтенияОбъектовМетаданных", ПослеЧтенияОбъектовМетаданных);
	КонецЕсли;	
	
	ВыгрузитьТекущуюКонфигурациюВXML(ДополнительныеПараметры);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТекущуюКонфигурациюВXML(ДополнительныеПараметры)	
	
	КаталогТекущейКонфигурации = ДополнительныеПараметры.КаталогТекущейКонфигурации;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьТекущуюКонфигурациюВXMLПослеСозданияКаталога", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьСозданиеКаталога(Оповещение, КаталогТекущейКонфигурации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТекущуюКонфигурациюВXMLПослеСозданияКаталога(Результат, ДополнительныеПараметры) Экспорт	
	
	КаталогТекущейКонфигурации = ДополнительныеПараметры.КаталогТекущейКонфигурации;
	
	СтрокаПодключенияИБАдаптированная = СтрЗаменить(СтрокаПодключенияИБ, """", """""");
	
	ДобавитьЗаписьВЛог("Начало выгрузки конфигурации в каталог: " + КаталогТекущейКонфигурации);	
	
	КомандаВыгрузитьКонфигурацию = ПостроитьКоманднуюСтрокуСохраненияКонфигурацииXML(СтрокаПодключенияИБАдаптированная, КаталогТекущейКонфигурации);
	
	ВыполнитьКоманднуюСтроку(КомандаВыгрузитьКонфигурацию);
	
	ЗаписатьВЛогРезультатРаботыКонфигуратора(КаталогТекущейКонфигурации);
	
	Если ДополнительныеПараметры.Свойство("ПослеВыгрузкиКонфигурацииВXML") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПослеВыгрузкиКонфигурацииВXML);
	КонецЕсли;	
	
КонецПроцедуры		

&НаКлиенте
Процедура ПрочитатьОбъектыМетаданныхИзВыгрузки(Результат, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	КаталогТекущейКонфигурации = ДополнительныеПараметры.КаталогТекущейКонфигурации;
	
	ФайлОписанияКонфигурации = КаталогТекущейКонфигурации + "Configuration.xml";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОписанияКонфигурации);
	
	ОписаниеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ВидыОбъектовМетаданныхXDTO = ОписаниеXDTO.Configuration.ChildObjects;
	
	ПереченьВидовОбъектовМедатанныхXDTO = ВидыОбъектовМетаданныхXDTO.Свойства();
	
	Для Каждого ОписаниеВидаОбъектаМетаданныхXDTO Из ПереченьВидовОбъектовМедатанныхXDTO Цикл		
		
		Если ОписаниеВидаОбъектаМетаданныхXDTO.Имя = "CommonAttribute" Тогда
			Продолжить;
		КонецЕсли;		
		
		ПереченьОбъектовМетаданныхXDTO = ВидыОбъектовМетаданныхXDTO[ОписаниеВидаОбъектаМетаданныхXDTO.Имя];
		
		// Если всего 1 объект определенного вида сортировать нет смысла		
		Если ТипЗнч(ПереченьОбъектовМетаданныхXDTO) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОбъектМетаданныхXDTO Из ПереченьОбъектовМетаданныхXDTO Цикл
			
			ОбъектМетаданныхСтрока = Объект.ОбъектыМетаданных.Добавить();
			ОбъектМетаданныхСтрока.Тип = ОписаниеВидаОбъектаМетаданныхXDTO.Имя;
			ОбъектМетаданныхСтрока.Имя = ОбъектМетаданныхXDTO;
			ОбъектМетаданныхСтрока.Префикс = НайтиПрефиксВИмениОбъекта(ОбъектМетаданныхXDTO);
			
		КонецЦикла;		
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Если ДополнительныеПараметры.Свойство("ПослеЧтенияОбъектовМетаданных") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПослеЧтенияОбъектовМетаданных);
	КонецЕсли;	
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНовыйПорядок(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт	
	
	ПрименитьНастройкиПрефиксов();
	
	СохранитьПараметрыКорняКонфигурации();
	
	ЗагрузитьСтруктуруВИБ();
	
	Если Не РежимОтладки Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;	
	
	Сообщить(НСтр("ru = 'Новый порядок объектов сохранен в конфигурации. Запустите конфигуратор и примените конфигурацию к информационной базе.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиПрефиксов()	
	
	Для Каждого Строка Из Объект.ОбъектыМетаданных Цикл
		
		Если ПустаяСтрока(Строка.Префикс) Тогда
			Продолжить;
		КонецЕсли;		
		
		Для Каждого СтрокаПрефикса Из Объект.Префиксы Цикл
			Если СтрокаПрефикса.Префикс = Строка.Префикс Тогда
				Если Не СтрокаПрефикса.Использовать Тогда
					Прервать;
				КонецЕсли;
				Строка.ПорядокПрефикса = СтрокаПрефикса.ПорядокПрефикса;
			КонецЕсли;
		КонецЦикла;
				
	КонецЦикла;	
	
	Объект.ОбъектыМетаданных.Сортировать("Тип,ПорядокПрефикса,Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметрыКорняКонфигурации()
	
	#Если Не ВебКлиент Тогда
	
	ДобавитьЗаписьВЛог("Начало сохранения структуры корня");
	
	РазделительПути = ПолучитьРазделительПути();
	
	КаталогТекущейКонфигурации = ВременныйКаталог + РазделительПути + "Config" + РазделительПути;		
	
	ФайлОписанияКонфигурации = КаталогТекущейКонфигурации + "Configuration.xml";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОписанияКонфигурации);
	
	ОписаниеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	ВидыОбъектовМетаданныхXDTO = ОписаниеXDTO.Configuration.ChildObjects;
	
	ПереченьВидовОбъектовМедатанныхXDTO = ВидыОбъектовМетаданныхXDTO.Свойства();
	
	Для Каждого ОписаниеВидаОбъектаМетаданныхXDTO Из ПереченьВидовОбъектовМедатанныхXDTO Цикл
		
		Если ОписаниеВидаОбъектаМетаданныхXDTO.Имя = "CommonAttribute" Тогда
			Продолжить;
		КонецЕсли;		
		
		ПереченьОбъектовМетаданныхXDTO = ВидыОбъектовМетаданныхXDTO[ОписаниеВидаОбъектаМетаданныхXDTO.Имя];
		
		// Если всего 1 объект определенного вида сортировать нет смысла		
		Если ТипЗнч(ПереченьОбъектовМетаданныхXDTO) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Тип", ОписаниеВидаОбъектаМетаданныхXDTO.Имя);
		
		ПереченьОбъектов = Объект.ОбъектыМетаданных.НайтиСтроки(СтруктураПоиска);
		
		ПереченьОбъектовМетаданныхXDTO.Очистить();
		
		Для Каждого Строка Из ПереченьОбъектов Цикл
			ПереченьОбъектовМетаданныхXDTO.Добавить(Строка.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
	ФайлОписанияКонфигурации = КаталогТекущейКонфигурации + "Configuration_new.xml";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлОписанияКонфигурации);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеXDTO);
	
	ЗаписьXML.Закрыть();
	
	ИтоговаяКонфигурация = "";
	
	ЧтениеТекста = Новый ЧтениеТекста(КаталогТекущейКонфигурации + "Configuration_new.xml");
	НоваяКонфигурация = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	НачалоНовогоПорядкаОбъектов = СтрНайти(НоваяКонфигурация, "<ChildObjects>");
	КонецНовогоПорядкаОбъектов = СтрНайти(НоваяКонфигурация, "</ChildObjects>");
	
	ЧтениеТекста = Новый ЧтениеТекста(КаталогТекущейКонфигурации + "Configuration.xml");
	СтараяКонфигурация = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	НачалоСтарогоПорядкаОбъектов = СтрНайти(СтараяКонфигурация, "<ChildObjects>");
	КонецСтарогоПорядкаОбъектов = СтрНайти(СтараяКонфигурация, "</ChildObjects>");
	
	ИтоговаяКонфигурация = ИтоговаяКонфигурация + Лев(СтараяКонфигурация, НачалоСтарогоПорядкаОбъектов);
	ИтоговаяКонфигурация = ИтоговаяКонфигурация + Сред(НоваяКонфигурация, НачалоНовогоПорядкаОбъектов + 1, КонецНовогоПорядкаОбъектов - НачалоНовогоПорядкаОбъектов);
	ИтоговаяКонфигурация = ИтоговаяКонфигурация + Прав(СтараяКонфигурация, СтрДлина(СтараяКонфигурация) - КонецСтарогоПорядкаОбъектов);
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогТекущейКонфигурации + "Configuration.xml");
	ЗаписьТекста.Записать(ИтоговаяКонфигурация);
	ЗаписьТекста.Закрыть();
	
	ДобавитьЗаписьВЛог("Структура корня сохранена");
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтруктуруВИБ()	
	
	ПутьРазмещенияНовойБазы = СоздатьПустуюИнформационнуюБазу();
	
	РазделительПути = ПолучитьРазделительПути();
	
	КаталогХраненияЛогов = ВременныйКаталог + РазделительПути;

	КаталогТекущейКонфигурации = ВременныйКаталог + РазделительПути + "Config" + РазделительПути;
	
	СтрокаПодключенияНовойИБ = "File=""" + ПутьРазмещенияНовойБазы + """";
	
	СтрокаПодключенияИБАдаптированная = СтрЗаменить(СтрокаПодключенияНовойИБ, """", """""");
	
	КомандаЗагрузитьКонфигурацию = ПостроитьКоманднуюСтрокуЗагрузкиКорняКонфигурации(СтрокаПодключенияИБАдаптированная, КаталогТекущейКонфигурации);
	
	ВыполнитьКоманднуюСтроку(КомандаЗагрузитьКонфигурацию);
	
	ЗаписатьВЛогРезультатРаботыКонфигуратора(КаталогТекущейКонфигурации);
	
	ИмяФайлаКонфигурации = ВременныйКаталог + РазделительПути + "sort.cf";
	
	КомандаСохранитьКонфигурацию = ПостроитьКоманднуюСтрокуВыгрузитьКонфигурацию(СтрокаПодключенияИБАдаптированная, ИмяФайлаКонфигурации, КаталогХраненияЛогов);
	
	ДобавитьЗаписьВЛог(КомандаСохранитьКонфигурацию);
	
	ВыполнитьКоманднуюСтроку(КомандаСохранитьКонфигурацию);
	
	ЗаписатьВЛогРезультатРаботыКонфигуратора(КаталогХраненияЛогов);
	
	СтрокаПодключенияИБАдаптированная = СтрЗаменить(СтрокаПодключенияИБ, """", """""");
	
	ИмяФайлаНастроек = ВременныйКаталог + РазделительПути + "setting.xml";
	
	ФайлНастроек = Новый ЗаписьТекста(ИмяФайлаНастроек);
	ФайлНастроек.Записать(ПолучитьНастройкиОбъединенияСервер());
	ФайлНастроек.Закрыть();
	
	Команда = ПостроитьКоманднуюСтрокуОбъединитьСОтсортированной(
		СтрокаПодключенияИБАдаптированная, 
		ИмяФайлаКонфигурации, 
		ИмяФайлаНастроек,
		КаталогХраненияЛогов);
		
	ВыполнитьКоманднуюСтроку(Команда);
	
	ЗаписатьВЛогРезультатРаботыКонфигуратора(КаталогХраненияЛогов);
	
	ДобавитьЗаписьВЛог("Загрузка структуры в ИБ завершена");	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТаблицуПрефиксовВJSON()
	
	Массив = Новый Массив;
	
	Для Каждого Строка Из Объект.Префиксы Цикл
		
		Если Строка.Использовать Тогда
			
			ИнформацияОПрефиксе = Новый Структура;
			ИнформацияОПрефиксе.Вставить("Префикс", Строка.Префикс);
			ИнформацияОПрефиксе.Вставить("ПорядокПрефикса", Строка.ПорядокПрефикса);
			
			Массив.Добавить(ИнформацияОПрефиксе);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПрефиксыJSON = ЗначениеВJSON(Массив);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТаблицуПрефиксовИзJSON()
	
	Если ПустаяСтрока(ПрефиксыJSON) Тогда
		Возврат;
	КонецЕсли;	
	
	Массив = ЗначениеИзJSON(ПрефиксыJSON);
	
	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого НастройкиПрефикса Из Массив Цикл
		Строка = Объект.Префиксы.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, НастройкиПрефикса);
		Строка.Использовать = Истина;
	КонецЦикла;	
	
	Элементы.ПрефиксыТолькоИспользуемые.Пометка = Истина;
	
	УстановитьОтборПрефиксов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПрефиксов()
	
	Если Элементы.ПрефиксыТолькоИспользуемые.Пометка Тогда
	
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("Использовать", Истина);
		
		Элементы.Префиксы.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
	Иначе
		
		Элементы.Префиксы.ОтборСтрок = Неопределено;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьПустуюИнформационнуюБазу()
	
	РазделительПути = ПолучитьРазделительПути();
	
	КаталогИнформационнойБазы = ВременныйКаталог + РазделительПути + "NewBase" + РазделительПути;
	
	КомандаСоздатьИнформационнуюБазу = ПостроитьКоманднуюСтрокуСозданияНовойИБ(КаталогИнформационнойБазы);
	
	ВыполнитьКоманднуюСтроку(КомандаСоздатьИнформационнуюБазу);
	
	ДобавитьЗаписьВЛог(НСтр("ru = 'Пустая информационная база создана'"));
	
	Возврат КаталогИнформационнойБазы;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиОбъединенияСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("СравнениеПоУмолчанию").ПолучитьТекст();
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьВЛогРезультатРаботыКонфигуратора(КаталогХраненияЛогов)
		
	Out = Новый ЧтениеТекста(КаталогХраненияЛогов + "Out.txt");
	РезультатРаботыКонфигуратора = СокрЛП(Out.Прочитать());
	Out.Закрыть();
	
	ДобавитьЗаписьВЛог(РезультатРаботыКонфигуратора);
	
	Если СтрНайти(РезультатРаботыКонфигуратора, "Ошибка блокировки информационной базы для конфигурирования") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка запуска конфигуратор, возможно конфигуратор уже запущен.'");		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииСозданияКомандныхСтрокКонфигуратора

&НаКлиенте
Функция ПостроитьКоманднуюСтрокуСохраненияКонфигурацииXML(СтрокаПодключенияИБ, КаталогДляСохранения)
	
	#Если Не ВебКлиент Тогда
	
	КС = """&def_path\1cv8.exe"" DESIGNER /&def_connect";
	
	КС = СтрЗаменить(КС, "&def_path\", КаталогПрограммы());
	
	КС = СтрЗаменить(КС, "&def_connect", "IBConnectionString """ + СтрокаПодключенияИБ + """");
	
	ДобавитьДанныеАутентификацииКоманднойСтроке(КС);
	
	КС = КС + " /DisableStartupDialogs /DisableStartupMessages /DisableUnrecoverableErrorMessage";
		
	КС = КС + " /DumpConfigToFiles """ + КаталогДляСохранения + """";
	
	КС = КС + " /Out """ + КаталогДляСохранения + "Out.txt""";
	
	Возврат КС;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ПостроитьКоманднуюСтрокуЗапускаКонфигуратора(СтрокаПодключенияИБ)
	
	#Если Не ВебКлиент Тогда
	
	КС = """&def_path\1cv8.exe"" DESIGNER /&def_connect";
	
	КС = СтрЗаменить(КС, "&def_path\", КаталогПрограммы());
	
	КС = СтрЗаменить(КС, "&def_connect", "IBConnectionString """ + СтрокаПодключенияИБ + """");
	
	ДобавитьДанныеАутентификацииКоманднойСтроке(КС);
	
	Возврат КС;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ПостроитьКоманднуюСтрокуЗагрузкиКорняКонфигурации(СтрокаПодключенияИБ, КаталогДляСохранения)
	
	#Если Не ВебКлиент Тогда
	
	КС = """&def_path\1cv8.exe"" DESIGNER /&def_connect";
	
	КС = СтрЗаменить(КС, "&def_path\", КаталогПрограммы());
	
	КС = СтрЗаменить(КС, "&def_connect", "IBConnectionString """ + СтрокаПодключенияИБ + """");
	
	КС = КС + " /DisableStartupDialogs /DisableStartupMessages /DisableUnrecoverableErrorMessage";
	
	КС = КС + " /LoadConfigFromFiles """ + КаталогДляСохранения + """";
	
	КС = КС + " /Out """ + КаталогДляСохранения + "Out.txt""";
	
	Возврат КС;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ПостроитьКоманднуюСтрокуСозданияНовойИБ(ПутьФайловойИБ)
	
	#Если Не ВебКлиент Тогда
	
	КС = """&def_path\1cv8.exe"" CREATEINFOBASE File=&def_file";
	
	КС = СтрЗаменить(КС, "&def_path\", КаталогПрограммы());
	
	КС = СтрЗаменить(КС, "&def_file", ПутьФайловойИБ);
	
	Возврат КС;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ПостроитьКоманднуюСтрокуВыгрузитьКонфигурацию(ПутьФайловойИБ, ИмяФайлаКонфигурации, КаталогДляСохранения)
	
	#Если Не ВебКлиент Тогда
	
	РазделительПути = ПолучитьРазделительПути();
	
	КС = """&def_path\1cv8.exe"" DESIGNER /&def_connect";
	
	КС = СтрЗаменить(КС, "&def_path\", КаталогПрограммы());
	
	КС = СтрЗаменить(КС, "&def_connect", "IBConnectionString """ + ПутьФайловойИБ + """");
	
	КС = КС + " /DisableStartupDialogs /DisableStartupMessages /DisableUnrecoverableErrorMessage";
	
	КС = КС + " /DumpCfg """ + ИмяФайлаКонфигурации + """";
	
	КС = КС + " /Out """ + КаталогДляСохранения + "Out.txt""";
	
	Возврат КС;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ПостроитьКоманднуюСтрокуОбъединитьСОтсортированной(СтрокаПодключенияИБ, ФайлКонфигурации, ФайлНастроек, КаталогДляСохранения)
	
	#Если Не ВебКлиент Тогда
	
	КС = """&def_path\1cv8.exe"" DESIGNER /&def_connect";
	
	КС = СтрЗаменить(КС, "&def_path\", КаталогПрограммы());
	
	КС = СтрЗаменить(КС, "&def_connect", "IBConnectionString """ + СтрокаПодключенияИБ + """");
	
	ДобавитьДанныеАутентификацииКоманднойСтроке(КС);
	
	КС = КС + " /DisableStartupDialogs /DisableStartupMessages /DisableUnrecoverableErrorMessage";
		
	КС = КС + " /MergeCfg """ + ФайлКонфигурации + """";
	
	КС = КС + " -Settings """ + ФайлНастроек + """";
	
	КС = КС + " -force";
	
	КС = КС + " /Out """ + КаталогДляСохранения + "Out.txt""";
	
	Возврат КС;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ДобавитьДанныеАутентификацииКоманднойСтроке(КС)
	
	Если ЗначениеЗаполнено(ИБ_Логин) Тогда
		КС = КС + " /N """ + ИБ_Логин + """";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИБ_Пароль) Тогда
		КС = КС + " /P """ + ИБ_Пароль + """";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Хранилище_Путь) Тогда
		КС = КС + " /ConfigurationRepositoryF """ + Хранилище_Путь + """";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Хранилище_Логин) Тогда
		КС = КС + " /ConfigurationRepositoryN """ + Хранилище_Логин + """";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Хранилище_Пароль) Тогда
		КС = КС + " /ConfigurationRepositoryP """ + Хранилище_Пароль + """";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСJSON

&НаКлиенте
Функция ЗначениеИзJSON(СтрокаJSON, ИменаСвойствСоЗначениямиДата = Неопределено, ПрочитатьВСоответствие = Ложь) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Значение = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата);
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ЗначениеВJSON(Значение) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Значение);
	СтрокаJSON = ЗаписьJSON.Закрыть();		
	
	Возврат СтрокаJSON;
	
	#КонецЕсли

КонецФункции

#КонецОбласти
		

